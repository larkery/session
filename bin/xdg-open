#!/usr/bin/env zsh
if [ "$1" = "-bg" ]; then
    shift
    xdg-open "$@" &
    disown
    exit
fi

RULES_FILE="$HOME/.config/open-rules"

if [ "$1" = "-rules" ]; then
    shift
    RULES_FILE="$1"
    shift
fi

err () {
    echo "error: $@" 1>&2
}

[[ "$#" -gt 0 ]] || {err "$0: requires an argument" && exit 1}

export XDG_OPEN_DEPTH=$(( ${XDG_OPEN_DEPTH:-0} + 1 ))

if [[ $XDG_OPEN_DEPTH -gt 5 ]]; then
    err "recursive xdg-open loop" "$1"
    exit 1
fi

RE_MATCH_PCRE=1

if [ -e "$1" ]; then
    mime="$(file --mime-type --brief $1)"
    exists=1
fi

found=1

while read -r mode match; do
    if [ $found != 0 ]; then
        case $mode in
            test)
                t="$1"
                1=${(q)1}
                eval $(eval echo $match)
                found=$?
                1=$t
                ;;
            name)
                [[ -n $exists && "$1" =~ "${match}" ]]
                found=$?
            ;;
            mime)
                [[ -n $exists && "$mime" =~ "${match}"  ]]
                found=$?
            ;;
            scheme)
                match="^$match:"
                [[ -z $exists && "$1" =~ "${match}" ]]
                found=$?
            ;;
            url)
                [[ -z $exists && "$1" =~ "${match}" ]]
                found=$?
            ;;
        esac
    elif [ $mode = run ]; then
        eval $match
        exit 0
    elif [ $mode = exec ]; then
        eval exec $match
    fi
done < "$RULES_FILE"

TGT="$1"
autoload -U regexp-replace
regexp-replace TGT /+ /

CMD=$(yad --center --entry --on-top --completion --entry-label "Open $TGT with:" ${(ko)commands})

if [[ $? -eq 0 ]]; then
    exec "$CMD" "$TGT"
else
    err "xdg-open failed: $1 has no matching rule"
    exit 1
fi
