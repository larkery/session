#!/run/current-system/sw/bin/perl

use strict;
use warnings;
use v5.24;

use Getopt::Long;
use Pod::Usage;
use IPC::Open2;
use File::Find;
use File::Spec;

my @fields = ();
my $do_copy;
my $do_print;
my $credentials;
my $do_open;
my $help;

GetOptions(
    "copy" => \$do_copy,
    "print" => \$do_print,
    "credentials-file=s" => \$credentials,
    "open" => \$do_open,
    "field=s" => \@fields,
    "help|?" => \$help
    ) or pod2usage(2);

pod2usage(1) if $help;

$do_open = $do_open ||
    !($do_copy || $do_print || $credentials || $help);

sub ask_for_entry {
    my $yad_pid = open2(
        my $yad_out, my $yad_in,
        "yad",
        "--list",
        "--column", "entry",
        "--search-column=1",
        "--print-column=1",
        "--width=400",
        "--height=400",
        "--mouse",
        "--regex-search");
    my $store = $ENV{"HOME"} . "/.password-store";
    find(
        sub {
            $File::Find::prune = 1 if /^\.git/;
            my $dir = File::Spec->abs2rel($File::Find::dir, $store);
            if ($dir eq ".") {
                $dir = "";
            } else {
                $dir = $dir . "/";
            }
            if (/\.gpg$/) {
                s/\.gpg$//;
                print $yad_in "$dir$_\n";
            }
        },
        $store);
    flush $yad_out;
    my $result = <$yad_out>;
    waitpid($yad_pid, 0);
    $result =~ s/\|\n//;
    return $result;
}

my $entry = $ARGV[0];
$entry = ask_for_entry() unless $entry;

exit unless $entry;

push @fields, "password" unless scalar @fields;

my ($password, @data) = `pass show "$entry"` or die('error from invoking pass');

chomp $password;

my $notes = "";
my %fieldvals = ();

$fieldvals{'password'} = $password;

for my $datum (@data) {
    chomp $datum;
    if ($datum =~ /([^:]+):(.+)/) {
        $fieldvals{$1} = $2;
    } else {
        $notes = $notes . $datum . "\n";
    }
}

for my $field (@fields) {
    my $value = $fieldvals{$field};
    if ($value) {
        say $value if $do_print;
        # copy to clipboard
        if ($do_copy) {
            system 'notify-send', $entry, "copied $field";
            open(my $xclip, "| xclip -quiet -l 1 -selection primary");
            print $xclip $value;
            close($xclip);
        }
    }
}

if ($credentials) {
    open(my $fh, '>', $credentials);
    my $un = $fieldvals{'smb-username'} || $fieldvals{'username'} || $fieldvals{'user'};
    print $fh "username=" . $un . "\n" if $un;
    print $fh "domain=" . $fieldvals{'smb-domain'} . "\n" if $fieldvals{'smb-domain'};
    print $fh "password=" . $fieldvals{'password'} . "\n" if $fieldvals{'password'};
    close($fh);
    # we need to kill the file later
    my $pid;
    open STDIN, '/dev/null';
    open STDOUT, '>>/dev/null';
    open STDERR, '>>/dev/null';
    unless ($pid = fork) {
        unless (fork) {
            sleep 5;
            unlink $credentials;
            exit 0;
        }
        exit 0;
    }
    waitpid($pid, 0);
}

if ($do_open) {
    sub xtype {
        my $text = shift;
        open(my $fh, "|-:encoding(utf-8)", "xdotool", "-");
        print $fh "type $text\n";
        close $fh;
    }

    my @args = ("yad", "--class", "password-input", "--width", "200", "--title", "pass: $entry", "--text", "$entry: \n$notes", "--form");

    for my $field (keys %fieldvals) {
        push @args, "--field=$field:fbtn";
        push @args, "echo '$field'";
    }

    push @args, "--button=gtk-cancel:0";
    push @args, "--mouse";
    push @args, "--on-top";
    push @args, "--no-focus";

    open(my $yad, '-|:encoding(utf-8)', @args);
    while (<$yad>) {
        chomp;
        if ($_ eq "url") {
            my $url = $fieldvals{$_};

            unless ($url =~ /:/) {
                $url = "http://$url";
            }

            system "xdg-open", ($url)
        } else {
            xtype $fieldvals{$_} if $fieldvals{$_};
        }
    }
}

__END__
=head1 NAME

passm - a pass wrapper

=head1 SYNOPSIS

passm [--copy] [--print] [--open] [--field x]* [--credentials-file <path>] entry-name
